package com.akhil_infinity.akhil.analyzin.CustomViews;

import android.app.Dialog;
import android.content.Context;
import android.graphics.Bitmap;
import android.net.Uri;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.util.Log;
import android.webkit.WebChromeClient;
import android.webkit.WebResourceRequest;
import android.webkit.WebSettings;
import android.webkit.WebView;
import android.webkit.WebViewClient;

import com.akhil_infinity.akhil.analyzin.Constants;
import com.akhil_infinity.akhil.analyzin.R;
import com.akhil_infinity.akhil.analyzin.interfaces.AuthenticationListener;

public class AuthenticationDialog extends Dialog {

    private AuthenticationListener listener;
    private Context context;
    private WebView webView;

    //https://api.instagram.com/oauth/authorize/?client_id=CLIENT-ID&redirect_uri=REDIRECT-URI&response_type=code
    private final String url = generateAuthUrl();

    private String generateAuthUrl(){
        StringBuilder builder = new StringBuilder();
        builder.append(Constants.BASE_URL);
        builder.append("oauth/authorize/?client_id=");
        builder.append(Constants.INSTAGRAM_CLIENT_ID);
        builder.append("&redirect_uri=");
        builder.append(Constants.REDIRECT_URL);
        builder.append("&response_type=token&response_type=token");
        return builder.toString();
    }

    public AuthenticationDialog(@NonNull Context context, AuthenticationListener listener) {
        super(context);
        this.context = context;
        this.listener = listener;
        Log.d("URL", url);
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        this.setContentView(R.layout.auth_dialog);
        initializeWebView();
    }

    private void initializeWebView(){
        Log.e("access_token", "initializeWebView");
        webView = findViewById(R.id.webView);
        webView.getSettings().setAppCachePath(context.getApplicationContext().getCacheDir().getAbsolutePath());
        webView.getSettings().setAllowFileAccess(true);
        webView.getSettings().setAppCacheEnabled(true);
        webView.getSettings().setJavaScriptEnabled(true);
        webView.getSettings().setCacheMode(WebSettings.LOAD_DEFAULT);
        webView.loadUrl(url);
        webView.setWebChromeClient(new WebChromeClient());
        webView.setWebViewClient(new WebViewClient(){

            String access_token;
            boolean authComplete;

            @Override
            public void onPageStarted(WebView view, String url, Bitmap favicon) {
                super.onPageStarted(view, url, favicon);
            }

            @Override
            public void onPageFinished(WebView view, String url) {
                super.onPageFinished(view, url);
               Log.e("access_token", "onPageFinished: " + url);
                //check for auth_token here
                if (url.contains("#access_token") && !authComplete){
                    Log.e("access_token", "contains access token");
                    Uri uri = Uri.parse(url);
                    access_token = uri.getEncodedFragment()
                            .substring(access_token.lastIndexOf("=")+1);
                    Log.e("access_token", access_token);
                    authComplete = true;
                    listener.onCodeReceived(access_token);
                    dismiss();
                }else if(url.contains("?error")){
                    Log.e(access_token, "Error finding the account");
                }
            }

            @Override
            public void onLoadResource(WebView view, String url) {
                //autogenerated method stub
                super.onLoadResource(view, url);
            }

            @Override
            public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {
                Log.e("access_token", "shouldOverrideUrlLoading: " + url);
                return super.shouldOverrideUrlLoading(view, request);
            }
        });
    }
}
